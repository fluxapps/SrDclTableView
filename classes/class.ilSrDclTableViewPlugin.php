<?php

/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see https://github.com/ILIAS-eLearning/ILIAS/tree/trunk/docs/LICENSE */

require_once __DIR__ . "/../vendor/autoload.php";

use srag\Plugins\SrDclTableView\Config\Config;
use srag\Plugins\SrDclTableView\Utils\SrDclTableViewTrait;
use srag\RemovePluginDataConfirm\SrDclTableView\PluginUninstallTrait;

/**
 * Class ilSrDclTableViewPlugin
 *
 * Generated by srag\PluginGenerator v0.9.9
 *
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author studer + raimann ag - Team Custom 1 <ms@studer-raimann.ch>
 */
class ilSrDclTableViewPlugin extends ilPageComponentPlugin {

	use PluginUninstallTrait;
	use SrDclTableViewTrait;
	const PLUGIN_ID = "srdtv";
	const PLUGIN_NAME = "SrDclTableView";
	const PLUGIN_CLASS_NAME = self::class;
	const REMOVE_PLUGIN_DATA_CONFIRM_CLASS_NAME = SrDclTableViewRemoveDataConfirm::class;
	/**
	 * @var self|null
	 */
	protected static $instance = NULL;


	/**
	 * @return self
	 */
	public static function getInstance(): self {
		if (self::$instance === NULL) {
			self::$instance = new self();
		}

		return self::$instance;
	}


	/**
	 * ilSrDclTableViewPlugin constructor
	 */
	public function __construct() {
		parent::__construct();
	}


	/**
	 * @return string
	 */
	public function getPluginName(): string {
		return self::PLUGIN_NAME;
	}


	/**
	 * @param string $a_type
	 *
	 * @return bool
	 */
	public function isValidParentType($a_type): bool {
		// Allow in all parent types
		return true;
	}


	/**
	 * @param array  $properties
	 * @param string $plugin_version
	 *
	 * @since ILIAS 5.3
	 */
	public function onDelete($properties, $plugin_version) {
		if (self::dic()->ctrl()->getCmd() !== "moveAfter") {
			if (self::dic()->ctrl()->getCmd() !== "cut") {
				$table_view = self::configs()->getConfig(intval($properties[ilSrDclTableViewPluginGUI::GET_PARAM_CONFIG_ID]));

				if ($table_view->get() > 0) {
					$table_view->delete();
				}
			} else {
				ilSession::set(ilSrDclTableViewPlugin::PLUGIN_NAME . "_cut_old_" . ilSrDclTableViewPluginGUI::GET_PARAM_CONFIG_ID . "_"
					. $properties[ilSrDclTableViewPluginGUI::GET_PARAM_CONFIG_ID], true);
			}
		}
	}


	/**
	 * @param array  $properties
	 * @param string $plugin_version
	 *
	 * @since ILIAS 5.3
	 */
	public function onClone(&$properties, $plugin_version) {
		$old_config_id = intval($properties[ilSrDclTableViewPluginGUI::GET_PARAM_CONFIG_ID]);

		$config = self::configs()->getConfig($old_config_id);

		/**
		 * @var Config $config_copy
		 */

		$config_copy = $config->copy();

		$config_copy->store();

		$properties[ilSrDclTableViewPluginGUI::GET_PARAM_CONFIG_ID] = $config_copy->getId();

		if (ilSession::get(ilSrDclTableViewPlugin::PLUGIN_NAME . "_cut_old_" . ilSrDclTableViewPluginGUI::GET_PARAM_CONFIG_ID . "_"
			. $old_config_id)) {
			ilSession::clear(ilSrDclTableViewPlugin::PLUGIN_NAME . "_cut_old_" . ilSrDclTableViewPluginGUI::GET_PARAM_CONFIG_ID . "_"
				. $old_config_id);

			$this->onDelete([ ilSrDclTableViewPluginGUI::GET_PARAM_CONFIG_ID => $old_config_id ], $plugin_version);
		}
	}


	/**
	 * @inheritdoc
	 */
	protected function deleteData()/*: void*/ {
		self::dic()->database()->dropTable(Config::TABLE_NAME, false);
	}
}
