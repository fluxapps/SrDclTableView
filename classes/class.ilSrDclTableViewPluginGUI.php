<?php

/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see https://github.com/ILIAS-eLearning/ILIAS/tree/trunk/docs/LICENSE */

require_once __DIR__ . "/../vendor/autoload.php";

use srag\DIC\SrDclTableView\DICTrait;
use srag\Plugins\SrDclTableView\Config\Config;
use srag\Plugins\SrDclTableView\Settings\SettingsFormGUI;
use srag\Plugins\SrDclTableView\Utils\SrDclTableViewTrait;

/**
 * Class ilSrDclTableViewPluginGUI
 *
 * Generated by srag\PluginGenerator v0.9.9
 *
 * @author            studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author            studer + raimann ag - Team Custom 1 <ms@studer-raimann.ch>
 *
 * @ilCtrl_isCalledBy ilSrDclTableViewPluginGUI: ilPCPluggedGUI
 */
class ilSrDclTableViewPluginGUI extends ilPageComponentPluginGUI {

	use DICTrait;
	use SrDclTableViewTrait;
	const PLUGIN_CLASS_NAME = ilSrDclTableViewPlugin::class;
	const LANG_MODULE_DCL_TABLE_VIEW = "srdtv";
	const GET_PARAM_CONFIG_ID = "config_id";
	const CMD_CANCEL = "cancel";
	const CMD_CREATE = "create";
	const CMD_CREATE_PLUG = "create_plug";
	const CMD_EDIT = "edit";
	const CMD_INSERT = "insert";
	const CMD_UPDATE = "update";
	const MODE_EDIT = "edit";


	/**
	 * ilSrDclTableViewPluginGUI constructor
	 */
	public function __construct() {
		parent::__construct();

		$this->level = 1;
	}


	/**
	 *
	 */
	public function executeCommand() {
		$next_class = self::dic()->ctrl()->getNextClass($this);

		switch (strtolower($next_class)) {
			default:
				$cmd = self::dic()->ctrl()->getCmd();

				switch ($cmd) {
					case self::CMD_CANCEL:
					case self::CMD_CREATE;
					case self::CMD_EDIT:
					case self::CMD_INSERT;
					case self::CMD_UPDATE;
						$this->{$cmd}();
						break;

					default:
						break;
				}
				break;
		}
	}


	/**
	 * @param Config $config
	 *
	 * @return SettingsFormGUI
	 */
	protected function getSettingsForm(Config $config): SettingsFormGUI {
		if (!self::access()->hasWriteAccess(self::configs()->filterRefId())) {
			throw new ilException("You have no permission to access this page");
		}

		$form = new SettingsFormGUI($this, $config);

		return $form;
	}


	/**
	 */
	public function insert() {
		$config = self::configs()->getConfig(0);

		$form = $this->getSettingsForm($config);

		self::output()->output($form);
	}


	/**
	 */
	public function edit() {
		$properties = $this->getProperties();

		$config_id = intval($properties[self::GET_PARAM_CONFIG_ID]);

		$config = self::configs()->getConfig($config_id);

		$form = $this->getSettingsForm($config);

		self::output()->output($form);
	}


	/**
	 *
	 */
	public function create() {
		$this->store(true);
	}


	/**
	 *
	 */
	public function update() {
		$this->store();
	}


	/**
	 *
	 */
	public function store(bool $new = false) {
		$properties = $this->getProperties();

		$config_id = intval($properties[self::GET_PARAM_CONFIG_ID]);

		$config = self::configs()->getConfig($config_id);

		$form = $this->getSettingsForm($config);

		if (!$form->storeForm()) {
			self::output()->output($form);

			return;
		}

		$properties = [ self::GET_PARAM_CONFIG_ID => $config->getId() ];

		if ($new) {
			$this->createElement($properties);
		} else {
			$this->updateElement($properties);
		}

		ilUtil::sendSuccess(self::plugin()->translate("saved", self::LANG_MODULE_DCL_TABLE_VIEW), true);

		$this->returnToParent();
	}


	/**
	 *
	 */
	public function cancel() {
		$this->returnToParent();
	}


	/**
	 * @param string $a_mode
	 * @param array  $a_properties
	 * @param string $plugin_version
	 *
	 * @return string
	 */
	public function getElementHTML($a_mode, array $a_properties, $plugin_version): string {

		switch ($a_mode) {
			case self::MODE_EDIT:
				return "";
				break;
			default:
		}

		self::dic()->mainTemplate()->addCss(self::plugin()->directory() . '/templates/srdtv.css');

		//self::dic()->mainTemplate()->addJavaScript(self::plugin()->directory() . '/templates/srdtv.js');

		$config_id = intval($a_properties[self::GET_PARAM_CONFIG_ID]);
		$config = self::configs()->getConfig($config_id);
		$table_view = new ilDclTableView($config->getDclTableviewId());

		if ($table_view->getTableId() > 0) {
			$table = new ilDclTable($table_view->getTableId());

			$data = $table->getPartialRecords("", "desc", 99999999, 0, [
				'filter_' . $config->getDclFieldIdSubprocessRef() => self::ilias()->dataCollections()->filterRecordId()
			]);
			/**
			 * @var ilDclBaseRecordModel[] $records
			 */
			$records = $data['records'];

			$arr_data = array();

			//foreach($records as $record_id) {
			foreach ($records as $record) {
				//Topic of Activity (e.g. Aufgabe vom entsprechenden Prozessschritt)
				$task_record = ilDclCache::getRecordCache($record->getRecordFieldValue($config->getDclFieldIdTopicRef()));

				if ($record->getRecordFieldValue($config->getDclFieldIdStartPoint())) {

					$arr_data[$task_record->getRecordFieldValue($config->getDclFieldIdTopicOrderBy())][$record->getRecordFieldValue($config->getDclFieldIdTopicRef())]['task_title'] = $task_record->getRecordFieldValue($config->getDclFieldIdTopicTitle());

					if (count($record->getRecordFieldValue($config->getDclFieldIdActivityChilds()) > 0)) {

						$arr_data[$task_record->getRecordFieldValue($config->getDclFieldIdTopicOrderBy())][$record->getRecordFieldValue($config->getDclFieldIdTopicRef())]['step_records'] = $this->returnChilds($record, $config->getDclFieldIdActivityChilds());
					}
				}
			}

			ksort($arr_data);

			$tpl_tables = self::plugin()->template("tables.html");
			$array_leafs = array();
			foreach ($arr_data as $task_order_by => $arr_tasks) {
				$this->level = 1;
				foreach ($arr_tasks as $task) {

					$tpl = self::plugin()->template("tree.html");
					$tpl->setVariable("TASK", $task['task_title']);

					$leaf_row = self::plugin()->template("leaf.html");
					$this->fillRecords($task["step_records"], $leaf_row, 1, $table_view,$config);

					$tpl->setVariable("LEAF", $leaf_row->get());
				}

				$tpl_tables->setVariable("TABLE", $tpl->get());
				$tpl_tables->parseCurrentBlock();
			}

			return self::output()->getHTML($tpl_tables);
		}

		return "";
	}


	public function fillRecords($records, $leaf_row, $level = 1, $table_view,$config) {

		global $ilLog;
		$ilLog->write("level " . $level);

		foreach ($records as $record) {

			$ilLog->write("level " . $record['record']->getRecordFieldSingleHTML(195));

			$this->fillLeaf($leaf_row, $table_view, $record['record'],$config);

			if (count($record['children']) > 0) {

				if (count($record['children']) > 1 && $this->level > $level) {


					$leaf_row_sub = self::plugin()->template("leaf.html");
					foreach ($record['children'] as $arr_child) {
						$this->fillRecords($arr_child, $leaf_row_sub, $level, $table_view,$config);
					}

					$leaf_row->setVariable("SUBLEAF", "<ul>" . $leaf_row_sub->get());
					$leaf_row->parseCurrentBlock();
				} else {
					$leaf_row->parseCurrentBlock();
					$this->level = $this->level + 1;
					foreach ($record['children'] as $arr_child) {
						$this->fillRecords($arr_child, $leaf_row, $level, $table_view,$config);
					}
				}
			} else {
				$this->level = $this->level - 1;
			}
		}
		$leaf_row->parseCurrentBlock();
	}


	public function returnChilds($record, $field_id_childs) {


		$arr_data = array();

		$arr_data[$record->getId()]['record'] = ilDclCache::getRecordCache($record->getId());

		if (count($record->getRecordFieldValue($field_id_childs)) > 0) {
			foreach ($record->getRecordFieldValue($field_id_childs) as $record_id) {

				$arr_data[$record->getId()]['children'][] = $this->returnChilds(ilDclCache::getRecordCache($record_id), $field_id_childs);
			}
		}

		return $arr_data;
	}


	/**
	 * @param $tpl
	 * @param $table_view
	 * @param $record
	 *
	 * @return mixed
	 * @throws \srag\DIC\SrDclTableView\Exception\DICException
	 * @throws ilTemplateException
	 */
	public function fillRow($tpl, $table_view, $record, $level = 1) {

		if (is_object($record)) {
			$tpl->setCurrentBlock("row");
			$tpl_body = self::plugin()->template("table_tr_body.html");

			$i = 1;
			foreach ($table_view->getVisibleFields() as $field) {
				$tpl_body->setCurrentBlock("cell");

				//first column
				if ($i == 1) {
					$tpl_body->setVariable("LEVEL", "pl-" . $level);
				}

				$tpl_body->setVariable("BACKGROUND_LEVEL", "bg-" . $level);

				$i = $i + 1;

				$tpl_body->setVariable("VALUE", $record->getRecordFieldSingleHTML($field->getId()));
				$tpl_body->parseCurrentBlock();
			}
			$tpl->setVariable("TABLE_BODY", $tpl_body->get());
			$tpl->parseCurrentBlock();
		} else {
			foreach ($record as $rec) {
				$this->fillRow($tpl, $table_view, $rec, $level + 1);
			}
		}

		return $field;
	}


	/**
	 * @param $tpl
	 * @param $table_view
	 * @param $record
	 * @param Config $config
	 *
	 * @return mixed
	 * @throws \srag\DIC\SrDclTableView\Exception\DICException
	 * @throws ilTemplateException
	 */
	public function fillLeaf($leaf_row, $table_view, $record,$config) {

		$prop_array = array();
		foreach ($table_view->getVisibleFields() as $field) {

			//TODO
			switch ($field->getTitle()) {
				case "Activity":
					$activity = $record->getRecordFieldSingleHTML($field->getId());
					break;
				case "Moment":
					if (strlen($record->getRecordFieldSingleHTML($field->getId()) > 0)) {
						$prop_array[$field->getTitle()] = $record->getRecordFieldSingleHTML($field->getId());
					}
					break;
				default:
					$prop_array[$field->getTitle()] = $record->getRecordFieldSingleHTML($field->getId());
					break;
			}
		}

		$leaf_row->setCurrentBlock("leaf");

		$f = self::dic()->ui()->factory();
		$renderer = self::dic()->ui()->renderer();

		$list_item1 = $f->item()->standard("")->withDescription($activity)->withProperties($prop_array);

		$std_list = $f->panel()->listing()->standard("", array(
			$f->item()->group("", array(
				$list_item1,
			))
		));

		$leaf_row->setVariable("TITLE", $record->getRecordFieldSingleHTML($config->getDclFieldIdActivityTitle()));
		$leaf_row->setVariable("CONTENT", $renderer->render($std_list));
	}
}
